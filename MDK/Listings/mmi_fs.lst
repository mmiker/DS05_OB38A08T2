C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FS
OBJECT MODULE PLACED IN .\Objects\mmi_fs.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\mmi_src\mmi_fs.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\inc;..\mmi_
                    -inc) DEBUG OBJECTEXTEND PRINT(.\Listings\mmi_fs.lst) TABS(2) OBJECT(.\Objects\mmi_fs.obj)

line level    source

   1          #ifndef __MMI_FS_C__
   2          #define __MMI_FS_C__
   3          
   4          #include "mmi_fs.h"
   5          #include "mmi_sys.h"
   6          #include "eeprom.h"
   7          #include "string.h"
   8          //#include "stdio.h"
   9          
  10          #include "mmi_fps.h"
  11          #include "mmi_ms.h"
  12          #include "dq_otp.h"
  13          
  14          mmi_fs_setting g_dq_fs_init_set;
  15          
  16          #define MMI_DQ_FS_PWD_MAX_NUM 3
  17          mmi_fs_pwd    g_dq_fs_pwd[MMI_DQ_FS_PWD_MAX_NUM];
  18          
  19          #ifdef __LOCK_FP_SUPPORT__
  20          #define     MMI_DQ_FS_FP_MAX_NUM      20
  21          mmi_fs_fp   g_dq_fs_fp[MMI_DQ_FS_FP_MAX_NUM];
  22          #endif
  23          
  24          #ifdef __LOCK_RFID_CARD_SUPPORT__
              #define     MMI_DQ_FS_RFID_MAX_NUM      10
              mmi_fs_rfid   g_dq_fs_rfid[MMI_DQ_FS_RFID_MAX_NUM];
              #endif
  28          
  29          static void mmi_dq_fds_read(mid_fds_file_id file,  unsigned char* r_data ,unsigned int r_size)
  30          {
  31   1        unsigned int i;
  32   1      #if 0
                switch(file)
                {
                  case MID_FDS_FILE_SET:
                    for(i = 0; i < r_size; i++)
                    {
                      r_data[i] = Read_EEPROM(i+EEPROM_SET_SATRT_ADDR);
                    }
                    break;
                  case MID_FDS_FILE_PWD:
                    for(i = 0; i < r_size; i++)
                    {
                      r_data[i] = Read_EEPROM(i+EEPROM_PW_SATRT_ADDR);
                    }
                    break;
              #ifdef __LOCK_FP_SUPPORT__
                  case MID_FDS_FILE_FP:
                    for(i = 0; i < r_size; i++)
                    {
                      r_data[i] = Read_EEPROM(i+EEPROM_FP_SATRT_ADDR);
                    }
                    break;
              #endif
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 2   

              #ifdef __LOCK_RFID_CARD_SUPPORT__
                  case MID_FDS_FILE_RF:
                    for(i = 0; i < r_size; i++)
                    {
                      r_data[i] = Read_EEPROM(i+EEPROM_RF_SATRT_ADDR);
                    }
                    break;
              #endif
                  default:
                    break;
                }
              #else
  67   1        for(i = 0; i < r_size; i++)
  68   1        {
  69   2          r_data[i] = Read_EEPROM(i+24*file);
  70   2        }
  71   1      #endif
  72   1      }
  73          
  74          static RET_VAL mmi_dq_fds_write(mid_fds_file_id file, unsigned char* w_data ,unsigned int w_size)
  75          {
  76   1        unsigned int i;
  77   1      #if 0
                switch(file)
                {
                  case MID_FDS_FILE_SET:
                    for(i = 0; i < w_size; i++)
                    {
                      Write_EEPROM(i+EEPROM_SET_SATRT_ADDR,w_data[i]);
                    }
                    break;
                  case MID_FDS_FILE_PWD:
                    for(i = 0; i < w_size; i++)
                    {
                      Write_EEPROM(i+EEPROM_PW_SATRT_ADDR,w_data[i]);
                    }
                    break;
              #ifdef __LOCK_FP_SUPPORT__
                  case MID_FDS_FILE_FP:
                    for(i = 0; i < w_size; i++)
                    {
                      Write_EEPROM(i+EEPROM_FP_SATRT_ADDR,w_data[i]);
                    }
                    break;
              #endif
              #ifdef __LOCK_RFID_CARD_SUPPORT__
                  case MID_FDS_FILE_RF:
                    for(i = 0; i < w_size; i++)
                    {
                      Write_EEPROM(i+EEPROM_RF_SATRT_ADDR,w_data[i]);
                    }
                    break;
              #endif
                  default:
                    return RET_FAIL;
                }
                
              #else
 113   1        for(i = 0; i < w_size; i++)
 114   1        {
 115   2          Write_EEPROM(i+24*file,w_data[i]);
 116   2        }
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 3   

 117   1      #endif
 118   1        return RET_SUCESS;
 119   1      }
 120          
 121          
 122          
 123          /*
 124          parameter: 
 125            none
 126          return :
 127            none
 128          */
 129          void mmi_dq_fs_init(void)
 130          {
 131   1        mmi_dq_fds_read(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 132   1        if(FDS_INIT_LOCK_SUC == g_dq_fs_init_set.init_flag || FDS_INIT_APP_SUC == g_dq_fs_init_set.init_flag)
 133   1        {
 134   2          g_dq_fs_init_set.alarm_flag = 0;
 135   2          mmi_dq_fds_read(MID_FDS_FILE_PWD, (unsigned char *)g_dq_fs_pwd, sizeof(mmi_fs_pwd)*MMI_DQ_FS_PWD_MAX_NUM
             -);
 136   2      #ifdef __LOCK_FP_SUPPORT__
 137   2          mmi_dq_fds_read(MID_FDS_FILE_FP, (unsigned char *)g_dq_fs_fp, sizeof(mmi_fs_fp)*MMI_DQ_FS_FP_MAX_NUM);
 138   2      #endif
 139   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
                  mmi_dq_fds_read(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid)*MMI_DQ_FS_RFID_MAX_N
             -UM);
              #endif
 142   2        }
 143   1        else
 144   1        {
 145   2          //printf("mmi_dq_fs_init init error");
 146   2          memset(g_dq_fs_pwd,0xFF,sizeof(g_dq_fs_pwd));
 147   2          g_dq_fs_pwd[0].flag = FDS_USE_TYPE_ADMIN;
 148   2          g_dq_fs_pwd[0].key_pwd[0] = 0x12;
 149   2          g_dq_fs_pwd[0].key_pwd[1] = 0x34;
 150   2          g_dq_fs_pwd[0].key_pwd[2] = 0x56;
 151   2      
 152   2          g_dq_fs_pwd[0].flag = FDS_USE_TYPE_USER;
 153   2          g_dq_fs_pwd[2].key_pwd[0] = 0x12;
 154   2          g_dq_fs_pwd[2].key_pwd[1] = 0x34;
 155   2          g_dq_fs_pwd[2].key_pwd[2] = 0x56;
 156   2          mmi_dq_fds_write(MID_FDS_FILE_PWD, (unsigned char *)g_dq_fs_pwd, sizeof(mmi_fs_pwd)*MMI_DQ_FS_PWD_MAX_NU
             -M);
 157   2          
 158   2      #ifdef __LOCK_FP_SUPPORT__
 159   2          memset(g_dq_fs_fp,0xFF,sizeof(g_dq_fs_fp));
 160   2          mmi_dq_fds_write(MID_FDS_FILE_FP, (unsigned char *)g_dq_fs_fp, sizeof(mmi_fs_fp)*MMI_DQ_FS_FP_MAX_NUM);
 161   2      
 162   2          mmi_dq_fp_empty();
 163   2      #endif
 164   2      #ifdef __LOCK_RFID_CARD_SUPPORT__
                  memset(g_dq_fs_rfid,0xFF,sizeof(g_dq_fs_rfid));
                  mmi_dq_fds_write(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid)*MMI_DQ_FS_RFID_MAX_
             -NUM);
              #endif
 168   2          g_dq_fs_init_set.init_flag = FDS_INIT_LOCK_SUC;
 169   2          //g_dq_fs_init_set.open_pro_sound = 1;
 170   2          //g_dq_fs_init_set.open_mode = SYS_OPEN_MODE_SIN;
 171   2          g_dq_fs_init_set.admin_status = 0;
 172   2          g_dq_fs_init_set.factory_flag = 0;
 173   2          g_dq_fs_init_set.wifi_flag = 0;
 174   2          g_dq_fs_init_set.alarm_flag = 0;
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 4   

 175   2          g_dq_fs_init_set.low_power_times = 0;
 176   2          g_dq_fs_init_set.language_flag = 0;
 177   2          //g_dq_fs_init_set.business_flag = 0;
 178   2          //for(i=0;i<8;i++)
 179   2          //  g_dq_fs_init_set.check_data[i] = 0xFF; 
 180   2          //mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 181   2          mmi_dq_fs_clr_set();
 182   2        }
 183   1      }
 184          
 185          /**
 186            * @brief  手动初始化
 187            * @param  none
 188            * @return none
 189            * @note   none
 190            * @see    none
 191            */
 192          RET_VAL mmi_dq_fs_clr_set(void)
 193          {
 194   1        unsigned char i = 0;
 195   1        g_dq_fs_init_set.open_pro_sound = 1;
 196   1        g_dq_fs_init_set.open_mode = SYS_OPEN_MODE_SIN;
 197   1        g_dq_fs_init_set.alarm_flag = 0;
 198   1        g_dq_fs_init_set.business_flag = 0;
 199   1        for(i=0;i<8;i++)
 200   1          g_dq_fs_init_set.check_data[i] = 0xFF; 
 201   1        return mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 202   1      }
 203          
 204          /**
 205            * @brief  复位初始化
 206            * @param  none
 207            * @return none
 208            * @note   none
 209            * @see    none
 210            */
 211          RET_VAL mmi_dq_fs_reset(void)
 212          {
 213   1        memset(g_dq_fs_pwd, 0xFF, sizeof(g_dq_fs_pwd));
 214   1        mmi_dq_fds_write(MID_FDS_FILE_PWD, (unsigned char *)g_dq_fs_pwd, sizeof(mmi_fs_pwd) * MMI_DQ_FS_PWD_MAX_N
             -UM);
 215   1      #ifdef __LOCK_FP_SUPPORT__
 216   1        memset(g_dq_fs_fp, 0xFF, sizeof(g_dq_fs_fp));
 217   1        mmi_dq_fds_write(MID_FDS_FILE_FP, (unsigned char *)g_dq_fs_fp, sizeof(mmi_fs_fp) * MMI_DQ_FS_FP_MAX_NUM);
 218   1      
 219   1        mmi_dq_fp_empty();
 220   1      #endif
 221   1      #ifdef __LOCK_RFID_CARD_SUPPORT__
                memset(g_dq_fs_rfid, 0xFF, sizeof(g_dq_fs_rfid));
                mmi_dq_fds_write(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid) * MMI_DQ_FS_RFID_MAX
             -_NUM);
              #endif
 225   1        g_dq_fs_init_set.init_flag = FDS_INIT_LOCK_SUC;
 226   1        //g_dq_fs_init_set.open_pro_sound = 1;
 227   1        //g_dq_fs_init_set.open_mode = SYS_OPEN_MODE_SIN;
 228   1        g_dq_fs_init_set.admin_status = 0;
 229   1        g_dq_fs_init_set.wifi_flag = 0;
 230   1        //g_dq_fs_init_set.business_flag = 0;
 231   1        //for(i=0;i<8;i++)
 232   1        //  g_dq_fs_init_set.check_data[i] = 0xFF; 
 233   1        return mmi_dq_fs_clr_set();//mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeo
             -f(mmi_fs_setting));
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 5   

 234   1      }
 235          
 236          /*
 237          parameter: 
 238            none
 239          return :
 240            none
 241          */
 242          void mmi_dq_fs_pwd_string_to_byte(unsigned char *input_pwd,unsigned char pwd_len,unsigned char *output_pwd
             -)
 243          {
 244   1        unsigned char i = 0;
 245   1        unsigned char bit_l = 0;
 246   1        unsigned char bit_h = 0;
 247   1      
 248   1        for(i=0;i<pwd_len;i++)
 249   1        {
 250   2          bit_l = *(input_pwd+i)&0x0F;
 251   2          i++;
 252   2          if(i < pwd_len)
 253   2            bit_h = *(input_pwd+i)&0x0F;
 254   2          else
 255   2            bit_h = 0xF;
 256   2          *output_pwd++ = bit_l<<4|bit_h;
 257   2        }
 258   1        return;
 259   1      }
 260          /*
 261          parameter: 
 262            none
 263          return :
 264            none
 265          */
 266          unsigned char mmi_dq_fs_pwd_byte_to_string(unsigned char *input_pwd,unsigned char *output_pwd)
 267          {
 268   1        unsigned char i = 0;
 269   1        unsigned char pwd = 0;
 270   1        unsigned char len = 0;
 271   1        for(i=0;i<4;i++)
 272   1        {
 273   2          pwd = *(input_pwd+i);
 274   2          if(pwd == 0xFF)
 275   2            break;
 276   2          else 
 277   2          {
 278   3            *output_pwd++ = (pwd&0xF0)>>4;
 279   3            len++;
 280   3          }
 281   2          if((pwd&0x0F) == 0x0F)
 282   2            break;
 283   2          else
 284   2          {
 285   3            *output_pwd++ = pwd&0x0F;
 286   3            len++;
 287   3          }
 288   2        }
 289   1        return len;
 290   1      }
 291          
 292          /*
 293          parameter: 
 294            none
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 6   

 295          return :
 296            none
 297          */
 298          unsigned char mmi_dq_fs_check_input_pwd(unsigned char *input_pwd,unsigned char len,fds_use_type type)
 299          {
 300   1        unsigned char i = 0;
 301   1        unsigned char k = 0;
 302   1        unsigned char password[4];
 303   1        unsigned char ret_val = 0xFF;
 304   1        
 305   1        memset(password,0xFF,sizeof(password));
 306   1        mmi_dq_fs_pwd_string_to_byte(input_pwd,len,password);
 307   1      
 308   1        for(i=0;i<MMI_DQ_FS_PWD_MAX_NUM;i++)
 309   1        {
 310   2          if(g_dq_fs_pwd[i].flag != FDS_USE_TYPE_INVALID)
 311   2          {
 312   3            for(k=0;k<4;k++)
 313   3            {
 314   4              if(password[k] != g_dq_fs_pwd[i].key_pwd[k])
 315   4                break;
 316   4            }
 317   3            if(k == 4)
 318   3            {
 319   4              break;
 320   4            }
 321   3          }
 322   2        }
 323   1        if(i<MMI_DQ_FS_PWD_MAX_NUM)
 324   1        {
 325   2          if((g_dq_fs_pwd[i].flag == type)||(type == FDS_USE_TYPE_ALL))
 326   2            ret_val = i;
 327   2          else
 328   2            ret_val = 0xFF;
 329   2        }
 330   1        else
 331   1          ret_val = 0xFF;
 332   1        
 333   1        return ret_val;
 334   1      }
 335          
 336          /*
 337          parameter: 
 338            none
 339          return :
 340            none
 341          */
 342          unsigned char mmi_dq_fs_check_input_pwd_for_open(unsigned char *input_pwd,unsigned char len)
 343          {
 344   1        unsigned char i = 0,n = 0;
 345   1        unsigned char k,j;
 346   1        unsigned char password[8];
 347   1        unsigned char passlen = 0;
 348   1        unsigned char ret_val = 0xFF;
 349   1        
 350   1        for(i=0;i<MMI_DQ_FS_PWD_MAX_NUM;i++)
 351   1        {
 352   2          if(g_dq_fs_pwd[i].flag == FDS_USE_TYPE_INVALID)
 353   2            continue;
 354   2          if(len !=6 && (g_dq_fs_pwd[i].key_pwd[0]==0x12&&g_dq_fs_pwd[i].key_pwd[1]==0x34
 355   2            &&g_dq_fs_pwd[i].key_pwd[2]==0x56&&g_dq_fs_pwd[i].key_pwd[3]==0xff))
 356   2            continue;
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 7   

 357   2          memset(password,0xFF,sizeof(password));
 358   2          passlen = mmi_dq_fs_pwd_byte_to_string(g_dq_fs_pwd[i].key_pwd,password);
 359   2          for(k = 0;k+passlen <= len; k++)
 360   2          {
 361   3            for(j=0;j<passlen;i++)
 362   3            {
 363   4              if(password[j] != input_pwd[k+j])
 364   4                break;
 365   4            }
 366   3            if(j==passlen)
 367   3              break;
 368   3          }
 369   2          if(j == passlen)
 370   2            break;
 371   2        }
 372   1        
 373   1        if(i<MMI_DQ_FS_PWD_MAX_NUM)
 374   1        {
 375   2          return i;
 376   2        }
 377   1        else
 378   1        {
 379   2          unsigned char adminword[8];
 380   2          unsigned char checkCode_out[8];
 381   2          unsigned char pass = 0;
 382   2          memset(adminword,0xFF,sizeof(adminword));
 383   2          passlen = mmi_dq_fs_pwd_byte_to_string(g_dq_fs_pwd[0].key_pwd,adminword);
 384   2          for(i=0;i<8;i++)
 385   2          {
 386   3            if(adminword[i]==0xFF)
 387   3              adminword[i] = 0;
 388   3            else
 389   3              adminword[i] += '0';
 390   3      
 391   3            if(input_pwd[i]==0xFF)
 392   3              password[i] = 0;
 393   3            else
 394   3              password[i] = input_pwd[i] + '0';
 395   3          }
 396   2          pass = dq_check_otp((char *)password,(char *)adminword,g_dq_fs_init_set.check_data,checkCode_out);
 397   2          if(pass > 0)
 398   2          {
 399   3            memcpy(g_dq_fs_init_set.check_data,checkCode_out,8);
 400   3            mmi_dq_fds_write(MID_FDS_FILE_SET,(unsigned char *)&g_dq_fs_init_set,sizeof(mmi_fs_setting));
 401   3            return 4;
 402   3          }
 403   2        }
 404   1        return 0xFF;
 405   1      }
 406          
 407          
 408          /*
 409          parameter: 
 410            none
 411          return :
 412            none
 413          */
 414          RET_VAL mmi_dq_fs_set_pwd(unsigned char *pwd,unsigned char pwd_size,fds_use_type type)
 415          {
 416   1        unsigned char i = 0xFF;
 417   1        unsigned char password[4];
 418   1      
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 8   

 419   1        if(type == FDS_USE_TYPE_ADMIN)
 420   1          i = 0;
 421   1        else if (type == FDS_USE_TYPE_110)
 422   1          i = 1;
 423   1        else if(type == FDS_USE_TYPE_USER)
 424   1          i = 2;
 425   1        
 426   1        if(i<MMI_DQ_FS_PWD_MAX_NUM)
 427   1        {
 428   2          memset(password,0xFF,sizeof(password));
 429   2          //g_dq_fs_pwd[i].index = i;
 430   2          mmi_dq_fs_pwd_string_to_byte(pwd,pwd_size,password);
 431   2          memcpy((char *)g_dq_fs_pwd[i].key_pwd,(const char *)password,4);
 432   2          g_dq_fs_pwd[i].flag = type;
 433   2          return  mmi_dq_fds_write(MID_FDS_FILE_PWD, (unsigned char *)g_dq_fs_pwd,sizeof(mmi_fs_pwd)*MMI_DQ_FS_PWD_
             -MAX_NUM);
 434   2          
 435   2        }
 436   1        return RET_FAIL;
 437   1      }
 438          
 439          #if defined (__LOCK_FP_SUPPORT__)
 440          /*
 441          parameter: 
 442            none
 443          return :
 444            none
 445          */
 446          unsigned char mmi_dq_fs_get_fp_unuse_index(void)
 447          {
 448   1        unsigned char i = 0;
 449   1      #ifdef __LOCK_110_SUPPORT__
 450   1        i = 1;
 451   1      #endif
 452   1        for(;i<MMI_DQ_FS_FP_MAX_NUM;i++)
 453   1        {
 454   2          if(g_dq_fs_fp[i].fp_index == 0xFF)
 455   2            break;
 456   2        }
 457   1        if(i>=MMI_DQ_FS_FP_MAX_NUM)
 458   1          return 0xFF;
 459   1        return i;
 460   1      }
 461          
 462          /*
 463          parameter: 
 464            none
 465          return :
 466            none
 467          */
 468          RET_VAL mmi_dq_fs_check_fp(unsigned char fp_index)
 469          {
 470   1        if((fp_index < MMI_DQ_FS_FP_MAX_NUM) && (g_dq_fs_fp[fp_index].fp_index == fp_index))
 471   1          return RET_SUCESS;
 472   1        else
 473   1          return RET_FAIL;
 474   1      }
 475          
 476          /*
 477          parameter: 
 478            none
 479          return :
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 9   

 480            none
 481          */
 482          RET_VAL mmi_dq_fs_set_fp(unsigned char fs_index)
 483          {
 484   1        g_dq_fs_fp[fs_index].fp_index = fs_index;
 485   1        return mmi_dq_fds_write(MID_FDS_FILE_FP, (unsigned char *)g_dq_fs_fp, sizeof(mmi_fs_fp)*MMI_DQ_FS_FP_MAX_
             -NUM);
 486   1      }
 487          
 488          /*
 489          parameter: 
 490            none
 491          return :
 492            none
 493          */
 494          RET_VAL mmi_dq_fs_del_fp(unsigned char fp_index)
 495          {
 496   1        if(mmi_dq_fs_check_fp(fp_index) == RET_SUCESS)
 497   1        {
 498   2          g_dq_fs_fp[fp_index].fp_index = 0xFF;
 499   2          return mmi_dq_fds_write(MID_FDS_FILE_FP, (unsigned char *)g_dq_fs_fp, sizeof(mmi_fs_fp)*MMI_DQ_FS_FP_MAX
             -_NUM);
 500   2        }
 501   1        return RET_FAIL;
 502   1      }
 503          #endif
 504          
 505          
 506          #ifdef __LOCK_RFID_CARD_SUPPORT__
              
              /*
              parameter: 
                none
              return :
                none
              */
              unsigned char mmi_dq_fs_get_rfid_unuse_index(void)
              {
                unsigned char i = 0;
              
                for(i=0;i<MMI_DQ_FS_RFID_MAX_NUM;i++)
                {
                  if(g_dq_fs_rfid[i].index == 0xFF)
                    break;
                }
              
                if(i>=MMI_DQ_FS_RFID_MAX_NUM)
                  return 0xFF;
                return i;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              unsigned char mmi_dq_fs_check_rfid(unsigned char *sec_data, fds_use_type type)
              {
                unsigned char i = 0,j = 0;
                
                for(i=0;i<MMI_DQ_FS_RFID_MAX_NUM;i++)
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 10  

                {
                  for(j=0;j<RFID_SEC_DATA_LEN;j++)
                  {
                    if(g_dq_fs_rfid[i].sec_data[j] != sec_data[j])
                      break;
                  }
                  if(j == RFID_SEC_DATA_LEN)
                    break;
                }
                if(i<MMI_DQ_FS_RFID_MAX_NUM&&((g_dq_fs_rfid[i].flag == type)||(type == FDS_USE_TYPE_ALL)))
                {
                  return i;
                }
                else
                {
                  return 0xFF;
                }
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              RET_VAL mmi_dq_fs_set_rfid(unsigned char *sec_data, fds_use_type type)
              {
                unsigned char i = 0,j = 0;
                for(i=0;i<MMI_DQ_FS_RFID_MAX_NUM;i++)
                {
                  if(g_dq_fs_rfid[i].index == 0xFF)
                    break;
                }
                if(i < MMI_DQ_FS_RFID_MAX_NUM)
                {
                  g_dq_fs_rfid[i].index = i;
                  g_dq_fs_rfid[i].flag = type;
                  for(j=0;j<RFID_SEC_DATA_LEN;j++)
                  {
                    g_dq_fs_rfid[i].sec_data[j] = sec_data[j];
                  }
                  return mmi_dq_fds_write(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid)*MMI_DQ_FS_RF
             -ID_MAX_NUM);
                }
                return RET_FAIL;
              }
              
              /*
              parameter: 
                none
              return :
                none
              */
              RET_VAL mmi_dq_fs_del_rfid(unsigned char rfid_index)
              {
                if(rfid_index < MMI_DQ_FS_RFID_MAX_NUM && g_dq_fs_rfid[rfid_index].index == rfid_index)
                {
                  g_dq_fs_rfid[rfid_index].index = 0xFF;
                  g_dq_fs_rfid[rfid_index].flag = FDS_USE_TYPE_INVALID;
                  memset(g_dq_fs_rfid[rfid_index].sec_data,0xFF,sizeof(g_dq_fs_rfid[rfid_index].sec_data));
                  return mmi_dq_fds_write(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid)*MMI_DQ_FS_RF
             -ID_MAX_NUM);
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 11  

                }
                return RET_FAIL;
              }
              
              
              /*
              parameter: 
                none
              return :
                none
              */
              RET_VAL mmi_dq_fs_clr_rfid(void)
              {
                unsigned char i = 0;
                
                for(i=0;i<MMI_DQ_FS_RFID_MAX_NUM;i++)
                {
                  g_dq_fs_rfid[i].flag = FDS_USE_TYPE_INVALID;
                  g_dq_fs_rfid[i].index = 0xFF;
                  memset(g_dq_fs_rfid[i].sec_data,0xFF,sizeof(g_dq_fs_rfid[i].sec_data));
                }
                return mmi_dq_fds_write(MID_FDS_FILE_RF, (unsigned char *)g_dq_fs_rfid, sizeof(mmi_fs_rfid)*MMI_DQ_FS_RFI
             -D_MAX_NUM);
              }
              
              #endif
 625          
 626          /*
 627          parameter: 
 628            none
 629          return :
 630            none
 631          */
 632          RET_VAL mmi_dq_fs_set_open_mode(sys_open_mode mode)
 633          {
 634   1        if(g_dq_fs_init_set.open_mode == mode)
 635   1          return RET_SUCESS;
 636   1      
 637   1        g_dq_fs_init_set.open_mode = mode;
 638   1        return mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 639   1        
 640   1      }
 641          /*
 642          parameter: 
 643            none
 644          return :
 645            none
 646          */
 647          sys_open_mode mmi_dq_fs_get_open_mode(void)
 648          {
 649   1        return g_dq_fs_init_set.open_mode;
 650   1      }
 651          
 652          /*
 653          parameter: 
 654            none
 655          return :
 656            none
 657          */
 658          RET_VAL mmi_dq_fs_set_pro_sound(unsigned char flag)
 659          {
 660   1        if(g_dq_fs_init_set.open_pro_sound == flag)
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 12  

 661   1          return RET_SUCESS;
 662   1        
 663   1        g_dq_fs_init_set.open_pro_sound = flag;
 664   1        return mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 665   1      
 666   1      }
 667          
 668          /*
 669          parameter: 
 670            none
 671          return :
 672            none
 673          */
 674          unsigned char mmi_dq_fs_get_pro_sound(void)
 675          {
 676   1        return g_dq_fs_init_set.open_pro_sound;
 677   1      }
 678          
 679          /*
 680          parameter: 
 681            none
 682          return :
 683            none
 684          */
 685          RET_VAL mmi_dq_fs_set_factory_flag(unsigned char flag)
 686          {
 687   1        g_dq_fs_init_set.factory_flag= flag;
 688   1        return mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 689   1      }
 690          
 691          /*
 692          parameter: 
 693            none
 694          return :
 695            none
 696          */
 697          unsigned char mmi_dq_fs_get_factory_flag(void)
 698          {
 699   1        return g_dq_fs_init_set.factory_flag;
 700   1      }
 701          
 702          /*
 703          parameter: 
 704            none
 705          return :
 706            none
 707          */
 708          RET_VAL mmi_dq_fs_set_wifi_setting(unsigned char flag)
 709          {
 710   1        g_dq_fs_init_set.wifi_flag = flag;
 711   1        return mmi_dq_fds_write(MID_FDS_FILE_SET, (unsigned char *)&g_dq_fs_init_set, sizeof(mmi_fs_setting));
 712   1      }
 713          
 714          /*
 715          parameter: 
 716            none
 717          return :
 718            none
 719          */
 720          unsigned char mmi_dq_fs_get_wifi_setting(void)
 721          {
 722   1        return g_dq_fs_init_set.wifi_flag;
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 13  

 723   1      }
 724          
 725          /*
 726          parameter: 
 727            none
 728          return :
 729            none
 730          */
 731          RET_VAL mmi_dq_fs_set_alarm_flag(unsigned char flag)
 732          {
 733   1        #if 0
                if(flag != g_dq_fs_init_set.alarm_flag)
                {
                  g_dq_fs_init_set.alarm_flag = flag;
                  return mmi_dq_fds_write(MID_FDS_FILE_SET,(unsigned char *)&g_dq_fs_init_set,sizeof(mmi_fs_setting));
                }
                #else
 740   1        g_dq_fs_init_set.alarm_flag = flag; 
 741   1        #endif
 742   1        return RET_SUCESS;
 743   1      }
 744          
 745          /*
 746          parameter: 
 747            none
 748          return :
 749            none
 750          */
 751          unsigned char mmi_dq_fs_get_alarm_flag(void)
 752          {
 753   1        return g_dq_fs_init_set.alarm_flag;
 754   1      }
 755          
 756          /*
 757          parameter: 
 758            none
 759          return :
 760            none
 761          */
 762          RET_VAL mmi_dq_fs_set_business_flag(unsigned char flag)
 763          {
 764   1        #if 0
                if(flag != g_dq_fs_init_set.alarm_flag)
                {
                  g_dq_fs_init_set.business_flag = flag;
                  return mmi_dq_fds_write(MID_FDS_FILE_SET,(unsigned char *)&g_dq_fs_init_set,sizeof(mmi_fs_setting));
                }
                #else
 771   1        g_dq_fs_init_set.business_flag = flag;
 772   1        #endif
 773   1        return RET_SUCESS;
 774   1      }
 775          
 776          /*
 777          parameter: 
 778            none
 779          return :
 780            none
 781          */
 782          unsigned char mmi_dq_fs_get_business_flag(void)
 783          {
 784   1        return g_dq_fs_init_set.business_flag;
C51 COMPILER V9.59.0.0   MMI_FS                                                            03/04/2021 15:15:15 PAGE 14  

 785   1      }
 786          
 787          
 788          
 789          
 790          
 791          
 792          
 793          
 794          
 795          
 796          
 797          
 798          
 799          
 800          
 801          
 802          
 803          
 804          
 805          
 806          
 807          
 808          
 809          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2199    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     57      87
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
