C51 COMPILER V9.59.0.0   DQIOT_DRV_CONTROL                                                 03/04/2021 15:15:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DQIOT_DRV_CONTROL
OBJECT MODULE PLACED IN .\Objects\dqiot_drv_control.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\src\dqiot_drv_control.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\inc;
                    -..\mmi_inc) DEBUG OBJECTEXTEND PRINT(.\Listings\dqiot_drv_control.lst) TABS(2) OBJECT(.\Objects\dqiot_drv_control.obj)

line level    source

   1          #include "mmi_feature.h"
   2          #ifdef __LOCK_CONTROL_SUPPORT__
   3          #include "I2C.h"
   4          #include "dqiot_drv_control.h"
   5          #include "delay.h"
   6          
   7          unsigned char CONTROL_Write_Byte(unsigned char *send,unsigned char send_len)
   8          {   
   9   1        I2C_Master_Write_Data(CONTROL_ADDR, send, send_len, 1);
  10   1        return 1;
  11   1      }
  12          
  13          
  14          unsigned char CONTROL_ReadDatas(unsigned char *send,unsigned char send_len,unsigned char *Buf,unsigned cha
             -r len) 
  15          {
  16   1        int i;
  17   1        for (i = 0; i < len; i++) 
  18   1        {
  19   2          Buf[i] = 0;
  20   2        }
  21   1        if(send_len>0)
  22   1        {
  23   2          // Write: register address we want to start reading from
  24   2          I2C_Master_Write_Data(CONTROL_ADDR, send, send_len, 0);
  25   2          // Read: the number of bytes requested.
  26   2          I2C_Master_Read_Data(CONTROL_ADDR, Buf, len);
  27   2        }
  28   1        else
  29   1        {
  30   2            I2C_Master_Read_Data(CONTROL_ADDR, Buf, len);
  31   2        }
  32   1        return 1;
  33   1      }
  34          
  35          
  36          unsigned char control_open_light(void)
  37          {
  38   1        unsigned char send[2];
  39   1        send[0] = CONTROL_LIGHT;
  40   1        send[1] = CONTROL_OPEN;
  41   1        if(CONTROL_Write_Byte(send,2) == 0)
  42   1          return 1;
  43   1        else
  44   1          return 0;
  45   1      }
  46          
  47          unsigned char control_closed_light(void)
  48          {
  49   1        unsigned char send[2];
  50   1        send[0] = CONTROL_LIGHT;
  51   1        send[1] = CONTROL_CLOSED;
  52   1        if(CONTROL_Write_Byte(send,2) == 0)
  53   1          return 1;
C51 COMPILER V9.59.0.0   DQIOT_DRV_CONTROL                                                 03/04/2021 15:15:13 PAGE 2   

  54   1        else
  55   1          return 0;
  56   1      }
  57          
  58          
  59          unsigned char control_open_motor(void)
  60          { 
  61   1        unsigned char send[2];
  62   1        send[0] = CONTROL_MOTOR;
  63   1        send[1] = CONTROL_OPEN;
  64   1        if(CONTROL_Write_Byte(send,2) == 0)
  65   1          return 1;
  66   1        else
  67   1          return 0;
  68   1      }
  69          
  70          unsigned char control_closed_motor(void)
  71          { 
  72   1        unsigned char send[2];
  73   1        send[0] = CONTROL_MOTOR;
  74   1        send[1] = CONTROL_CLOSED;
  75   1        if(CONTROL_Write_Byte(send,2) == 0)
  76   1          return 1;
  77   1        else
  78   1          return 0;
  79   1      }
  80          
  81          
  82          unsigned char control_open_solenoid(void)
  83          { 
  84   1        unsigned char send[2];
  85   1        send[0] = CONTROL_SOLENOID;
  86   1        send[1] = CONTROL_OPEN;
  87   1        if(CONTROL_Write_Byte(send,2) == 0)
  88   1          return 1;
  89   1        else
  90   1          return 0;
  91   1      }
  92          
  93          unsigned char control_closed_solenoid(void)
  94          { 
  95   1        unsigned char send[2];
  96   1        send[0] = CONTROL_SOLENOID;
  97   1        send[1] = CONTROL_CLOSED;
  98   1        if(CONTROL_Write_Byte(send,2) == 0)
  99   1          return 1;
 100   1        else
 101   1          return 0;
 102   1      }
 103          
 104          
 105          unsigned char control_open_alarm(void)
 106          { 
 107   1        unsigned char send[2];
 108   1        send[0] = CONTROL_ALARM;
 109   1        send[1] = CONTROL_OPEN;
 110   1        if(CONTROL_Write_Byte(send,2) == 0)
 111   1          return 1;
 112   1        else
 113   1          return 0;
 114   1      }
 115          
C51 COMPILER V9.59.0.0   DQIOT_DRV_CONTROL                                                 03/04/2021 15:15:13 PAGE 3   

 116          unsigned char control_closed_alarm(void)
 117          { 
 118   1        unsigned char send[2];
 119   1        send[0] = CONTROL_ALARM;
 120   1        send[1] = CONTROL_CLOSED;
 121   1        if(CONTROL_Write_Byte(send,2) == 0)
 122   1          return 1;
 123   1        else
 124   1          return 0;
 125   1      }
 126          
 127          unsigned char control_get_close_state(void)
 128          {
 129   1        unsigned char send[2];
 130   1        unsigned char send_2[2] = {0};
 131   1        send[0] = CONTROL_SEARCH;
 132   1        send[1] = CONTROL_OPEN;
 133   1        CONTROL_Write_Byte(send,2);
 134   1        delay_ms(10);
 135   1        CONTROL_ReadDatas(send,0,send_2,2);
 136   1        if(send_2[0]=='M'&&send_2[1]=='O')
 137   1          return 1;
 138   1        else
 139   1          return 0;
 140   1      }
 141          
 142          unsigned char control_set_close(void)
 143          {
 144   1        unsigned char send[2];
 145   1        send[0] = CONTROL_SEARCH;
 146   1        send[1] = CONTROL_CLOSED;
 147   1        if(CONTROL_Write_Byte(send,2) == 0)
 148   1          return 1;
 149   1        else
 150   1          return 0;
 151   1      }
 152          
 153          void control_wake_up(void)
 154          { 
 155   1        unsigned char send[2];
 156   1        send[0] = CONTROL_WAKEUP;
 157   1        send[1] = CONTROL_OPEN;
 158   1        CONTROL_Write_Byte(send,2);
 159   1       }
 160          
 161          
 162          #endif
 163          
 164          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    521    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
