C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MMI_FPS
OBJECT MODULE PLACED IN .\Objects\mmi_fps.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\mmi_src\mmi_fps.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\inc;..\mmi
                    -_inc) DEBUG OBJECTEXTEND PRINT(.\Listings\mmi_fps.lst) TABS(2) OBJECT(.\Objects\mmi_fps.obj)

line level    source

   1          #ifndef __MMI_FPC_C__
   2          #define __MMI_FPC_C__
   3          
   4          #include "mmi_feature.h"
   5          #ifdef __LOCK_FP_SUPPORT__
   6          #include "string.h"
   7          #include "mmi_fps.h"
   8          #include "dqiot_drv.h"
   9          #include "delay.h"
  10          
  11          unsigned char FP_oldStatus = 0;
  12          /*
  13          parameter: 
  14            current status machine
  15          return :
  16            none
  17          */
  18          //void mmi_dq_fp_set_fp_uart_handle_cb(fp_uart_handle_callback cb)
  19          //{
  20            
  21          //}
  22          
  23          /*
  24          parameter: 
  25            current status machine
  26          return :
  27            none
  28          */
  29          //void mmi_dq_fps_set_irq_handle_cb(fp_irq_handle_callback cb)
  30          //{
  31          //  cb = NULL;
  32          //}
  33          
  34          /*
  35          parameter: 
  36            current status machine
  37          return :
  38            none
  39          */
  40          void mmi_dq_fp_init(void)
  41          {
  42   1        unsigned int waittime = 2000;
  43   1        dqiot_drv_fp_init();
  44   1        
  45   1        while (--waittime)
  46   1        {
  47   2          delay_ms(1);
  48   2          if(FP_Get_Start_Flag() == 1)
  49   2          {
  50   3            FP_Light(FP_BLUE);
  51   3            return;
  52   3          }
  53   2        }
  54   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 2   

  55   1        return;
  56   1      }
  57          
  58          /*
  59          parameter: 
  60            current status machine
  61          return :
  62            none
  63          */
  64          unsigned char mmi_dq_fp_get_fp_mode(void)
  65          {
  66   1        return 1;
  67   1      }
  68          
  69          /*
  70          parameter: 
  71            current status machine
  72          return :
  73            none
  74          */
  75          unsigned char mmi_dq_fp_get_image(void)
  76          {
  77   1        unsigned char retval = 0;
  78   1      
  79   1        retval = PS_GetImage();
  80   1        return retval;
  81   1      }
  82          
  83          /*
  84          parameter: 
  85            current status machine
  86          return :
  87            none
  88          */
  89          unsigned char mmi_dq_fp_gen_char(unsigned char id)
  90          {
  91   1        unsigned char retval = 0;
  92   1        unsigned char real_buf_id;
  93   1      
  94   1        if (id == 0)
  95   1          real_buf_id = CHAR_BUFFER1;
  96   1        else if (id == 1)
  97   1          real_buf_id = CHAR_BUFFER2;
  98   1        else if (id == 2)
  99   1          real_buf_id = CHAR_BUFFER3;
 100   1        else if (id == 3)
 101   1          real_buf_id = CHAR_BUFFER4;
 102   1      
 103   1        retval = PS_GenChar(real_buf_id); //生成特征
 104   1        return retval;
 105   1      }
 106          
 107          /*
 108          parameter: 
 109            current status machine
 110          return :
 111            none
 112          */
 113          unsigned char mmi_dq_fp_match(void)
 114          {
 115   1        unsigned char retval = 0;
 116   1      
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 3   

 117   1        retval = PS_Match();
 118   1        return retval;
 119   1      }
 120          
 121          /*
 122          parameter: 
 123            current status machine
 124          return :
 125            none
 126          */
 127          unsigned char mmi_dq_fp_reg_module(void)
 128          {
 129   1        unsigned char retval = 0;
 130   1      
 131   1        retval = PS_RegModel();
 132   1        return retval;
 133   1      }
 134          
 135          /*
 136          parameter: 
 137            current status machine
 138          return :
 139            none
 140          */
 141          unsigned char mmi_dq_fp_store_char(unsigned char id,unsigned short index)
 142          {
 143   1        unsigned char retval = 0;
 144   1        unsigned char real_buf_id;
 145   1      
 146   1        if (id == 0)
 147   1          real_buf_id = CHAR_BUFFER1;
 148   1        else if (id == 1)
 149   1          real_buf_id = CHAR_BUFFER2;
 150   1        else if (id == 2)
 151   1          real_buf_id = CHAR_BUFFER3;
 152   1        else if (id == 3)
 153   1          real_buf_id = CHAR_BUFFER4;
 154   1      
 155   1      
 156   1        retval = PS_StoreChar(real_buf_id, index); //储存模板
 157   1        return retval;
 158   1      }
 159          
 160          /*
 161          parameter: 
 162            current status machine
 163          return :
 164            none
 165          */
 166          unsigned char mmi_dq_fp_delete(unsigned short index)
 167          {
 168   1        unsigned char retval = 0;
 169   1        
 170   1      
 171   1        retval = PS_DeletChar(index, 1);
 172   1        return retval;
 173   1      }
 174          
 175          /*
 176          parameter: 
 177            current status machine
 178          return :
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 4   

 179            none
 180          */
 181          unsigned char mmi_dq_fp_empty(void)
 182          {
 183   1        unsigned char retval = 0;
 184   1        
 185   1        retval = PS_Empty();
 186   1        return retval;
 187   1      }
 188          
 189          /*
 190          parameter: 
 191            current status machine
 192          return :
 193            none
 194          */
 195          unsigned char mmi_dq_fp_get_valid_templete(unsigned short *count)
 196          {
 197   1        unsigned char retval =0;
 198   1      
 199   1        retval = PS_ValidTempleteNum(count);
 200   1        return retval;
 201   1      }
 202          
 203          /*
 204          parameter: 
 205            current status machine
 206          return :
 207            none
 208          */
 209          unsigned char mmi_dq_fp_high_speed_search(unsigned char Buf_id,unsigned short *index)
 210          {
 211   1        unsigned char retval = 0;
 212   1        unsigned char real_buf_id;
 213   1        
 214   1        if (Buf_id == 0)
 215   1          real_buf_id = CHAR_BUFFER1;
 216   1        else if (Buf_id == 1)
 217   1          real_buf_id = CHAR_BUFFER2;
 218   1        else if (Buf_id == 2)
 219   1          real_buf_id = CHAR_BUFFER3;
 220   1        else if (Buf_id == 3)
 221   1          real_buf_id = CHAR_BUFFER4;
 222   1        retval = PS_HighSpeedSearch(real_buf_id, 0, 300, index);
 223   1        return retval;
 224   1      }
 225          
 226          /*
 227          parameter: 
 228            current status machine
 229          return :
 230            none
 231          */
 232          unsigned char mmi_dq_fp_search(unsigned char Buf_id,unsigned short *index)
 233          {
 234   1        unsigned char retval = 0;
 235   1        unsigned char real_buf_id;
 236   1      
 237   1        if (Buf_id == 0)
 238   1          real_buf_id = CHAR_BUFFER1;
 239   1        else if (Buf_id == 1)
 240   1          real_buf_id = CHAR_BUFFER2;
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 5   

 241   1        else if (Buf_id == 2)
 242   1          real_buf_id = CHAR_BUFFER3;
 243   1        else if (Buf_id == 3)
 244   1          real_buf_id = CHAR_BUFFER4;
 245   1      
 246   1        retval = PS_Search(real_buf_id, 0, 300, index);
 247   1        return retval;
 248   1      }
 249          
 250          /*
 251          parameter: 
 252            current status machine
 253          return :
 254            none
 255          */
 256          void mmi_dq_fp_light(FP_COLOR_E light_id)
 257          {
 258   1        FP_Light(light_id); //点灯
 259   1      }
 260          
 261          /*
 262          parameter: 
 263            current status machine
 264          return :
 265            none
 266          */
 267          FP_COLOR_E mmi_dq_fp_get_light(void)
 268          {
 269   1        FP_COLOR_E retval = 0;
 270   1        retval = FP_Get_Light();
 271   1        return retval;
 272   1      }
 273          
 274          /* 触摸判断 */
 275          unsigned char mmi_dq_fp_work(void)
 276          {
 277   1        if (dqiot_drv_fp_get_int_state() == 0)
 278   1        {
 279   2          if(FP_oldStatus == 0)
 280   2          {
 281   3            FP_oldStatus = 1;
 282   3            return 1;
 283   3          }
 284   2        }
 285   1        else
 286   1          FP_oldStatus = 0;
 287   1        return 0;
 288   1      }
 289          
 290          unsigned char mmi_dq_fp_get_pin(void)
 291          {
 292   1        return dqiot_drv_fp_get_int_state();
 293   1      }
 294          
 295          #endif  //__LOCK_FP_SUPPORT__
 296          
 297          #endif//__MMI_FPC_C__
 298          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    458    ----
C51 COMPILER V9.59.0.0   MMI_FPS                                                           03/04/2021 15:15:15 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
